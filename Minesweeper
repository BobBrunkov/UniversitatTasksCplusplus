#include <iostream>
#include <algorithm>
#include <vector>
#include <cstdlib>
#include <string>
using namespace std;
//Minesweeper Game
//M1: Mines
//M2: Display
//M3: Number

int mines = 0;
int rows = 0;
int cols = 0;

vector<vector<int>> matrix1(rows, vector<int>(cols, 0));
vector<vector<string>> matrix2(rows, vector<string>(cols, "X"));
vector<vector<int>> matrix3(rows, vector<int>(cols, 0));

bool gameOver = false;
bool gameLost = false;
bool gameWon = false;
int countFlags = 0;

string userInput = "";
int userRow;
int userCol;

void startGame()
{
	// minSIZE = 5
	// maxROW = 15
	// maxCOL = 30
	// minMINES = 2
	// maxMINES = 100

	cout << endl << "Welcome to Minesweeper";
	cout << endl << "Set Game Settings:";

	cout << endl << "Enter the number of rows(5 - 15): ";
	cin >> rows;

	cout << endl << "Enter the number of columns(5 - 30): ";
	cin >> cols;

	cout << endl << "Enter the number of mines(1 - 100): ";
	cin >> mines;

	gameOver = false;
	gameLost = false;
	gameWon = false;
	countFlags = 0;
}

void fillMassiv()
{
	matrix1 = vector<vector<int>>(rows, vector<int>(cols, 0));
	matrix2 = vector<vector<string>>(rows, vector<string>(cols, "X"));
	matrix3 = vector<vector<int>>(rows, vector<int>(cols, 0));
}

void displayM2()
{
	cout << endl;
	cout << "  ";
	for (int i = 0; i < cols; i++)
	{
		cout << i << " ";
	}

	cout << endl;
	cout << "  ";
	for (int i = 0; i < cols; i++)
	{
		cout << "-" << " ";

	}

	cout << endl;
	for (int i = 0; i < rows; i++) 
	{
		cout << i << "|";
		for (int j = 0; j < cols; j++) 
		{
			cout << matrix2[i][j] << " ";
		}
		cout << endl;
	}

	cout << endl;
}

void layMines()
{
	srand(time(NULL));
	int count = 0;
	while (true)
	{
		int i = rand() % (rows - 2) + 1;
		int j = rand() % (cols - 2) + 1;

		if (matrix1[i][j] == 0)
		{
			count++;
			matrix1[i][j] = 1;
		}
		else
		{
			continue;
		}
		if (count == mines)
		{
			break;
		}
	}
}

void showMines()
{
	cout << endl << "All Mines:" << endl;
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			cout << matrix1[i][j];
		}
		cout << endl;
	}
}

void fillM3()
{
	for (int i = 1; i < rows - 1; i++)
	{
		for (int j = 1; j < cols - 1; j++)
		{
			if (matrix1[i][j] == 1)
			{
				matrix3[i][j] = 10;
				matrix3[i - 1][j - 1]++; //1
				matrix3[i - 1][j]++; //2
				matrix3[i - 1][j + 1]++; //3
				matrix3[i][j - 1]++; //4
				matrix3[i][j + 1]++; //5
				matrix3[i + 1][j - 1]++; //6
				matrix3[i + 1][j]++; //7
				matrix3[i + 1][j + 1]++; //8
			}
		}
	}
}

//M1: Mines
//M2: Display
//M3: Number
void uncovering(int x, int y)
{
	if (x < 0 || x >= rows || y < 0 || y >= cols || matrix2[x][y] != "X")
	{
		return;
	}
	if (matrix3[x][y] > 0 && matrix3[x][y] < 9)
	{
		matrix2[x][y] = to_string(matrix3[x][y]);
		return;
	}
	if (matrix3[x][y] == 0)
	{
		matrix2[x][y] = to_string(0);
	}
	for (int dx = -1; dx <= 1; dx++)
	{
		for (int dy = -1; dy <= 1; dy++)
		{
			if (!(dx == 0 && dy == 0))
			{
				uncovering(x + dx, y + dy);
			}
		}
	}
}

void userStep()
{
	cout << "Commands:" << endl;
	cout << "Uncover Cell: (u row col)" << endl;
	cout << "Flag Cell: (f row col)" << endl;
	cin >> userInput >> userRow >> userCol;
	int i = userRow;
	int j = userCol;

	if (userInput == "u")
	{
		if (matrix1[i][j] == 1)
		{
			gameOver = true;
			gameLost = true;
		}
		else if (matrix2[i][j] == "X")
		{
			matrix2[i][j] = to_string(matrix3[i][j]);
			//uncovering(i, j);
		}
	}
	else if (userInput == "f")
	{
		if (matrix2[userRow][userCol] == "F")
		{
			matrix2[userRow][userCol] = "X";
			countFlags--;
		}
		else if (matrix2[userRow][userCol] == "X")
		{
			matrix2[userRow][userCol] = "F";
			countFlags++;
		}
	}
}
//M1: Mines
//M2: Display
//M3: Number

void check()
{
	int countToVictory = 0;

	if (countFlags == mines)
	{
		for (int i = 0; i < rows; i++)
		{
			for (int j = 0; j < cols; j++)
			{
				if (matrix1[i][j] == 1 && matrix2[i][j] == "F")
				{
					countToVictory++;
				}
			}
		}
	}
	if (countToVictory == mines)
	{
		gameOver = true;
		gameWon = true;
	}
}

int main()
{
	while (true)
	{
		startGame();
		fillMassiv();
		layMines();
		fillM3();

		while (true)
		{
			userInput = "";
			//showMines();
			displayM2();
			userStep();
			check();
			if (gameOver == true)
			{
				break;
			}
		}

		string ans = "";
		if (gameLost == true)
		{
			cout << endl << "You have lost";
			displayM2();
			showMines();
			cout << endl << "Want to play again? (y/n): ";
		}
		else if (gameWon == true)
		{
			cout << endl << "Congratulations! You have won!";
			displayM2();
			showMines();
			cout << endl << "Want to play again? (y/n): ";
		}

		cin >> ans;
		if (ans == "y")
		{
			continue;
		}
		else
		{
			break;
		}
	}

	cout << endl;
	return 0;
}

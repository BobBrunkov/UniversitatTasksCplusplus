#include <iostream>
#include <string>
#include <vector>
using namespace std;
//Date Struct

const string INVALID_DATE = "Invalid Date";
const string ONE_OF_THE_DATES_IS_INCORRECT = "One of the dates is incorrect";

struct month
{
	string name;
	int numberOfDays;
};

const vector<month> MONTHS{
	{"January", 31},
	{"February", 28},
	{"March", 31},
	{"April", 30},
	{"May", 31},
	{"June", 30},
	{"July", 31},
	{"August", 31},
	{"September", 30},
	{"October", 31},
	{"November", 30},
	{"December", 31},
};

const vector<string> DAYS_OF_THE_WEEK{ "Saturday", "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" };

struct date
{
public:
	date(int d, int m, int y) {
		day = d;
		month = m;
		year = y;
	}

	void newDate(int d, int m, int y) {
		day = d;
		month = m;
		year = y;
	}

	bool isValidDate() const {
		if (year < 1) {
			return false;
		}

		if (month < 1 || month > 12) {
			return false;
		}

		int numberOfDays = MONTHS[month - 1].numberOfDays;
		if (month == 2 && isLeapYear()) {
			numberOfDays++;
		}

		if (day < 1 || day > numberOfDays) {
			return false;
		}

		return true;
	}

	string getDayOfWeek() {
		if (!isValidDate()) {
			return INVALID_DATE;
		}

		int dayOfWeek = numberOfDaysByDate() % 7;

		return DAYS_OF_THE_WEEK[dayOfWeek];
	}

	int calculateDifference(const date& dt) {
		if (!isValidDate() || !dt.isValidDate()) {
			cout << ONE_OF_THE_DATES_IS_INCORRECT << endl;
			return 0;
		}

		return abs(numberOfDaysByDate() - dt.numberOfDaysByDate());
	}

	string printDate() {
		if (!isValidDate()) {
			return INVALID_DATE + " (" + to_string(day) + "." + to_string(month) + "." + to_string(year) + ")";
		}

		return MONTHS[month - 1].name + " " + to_string(day) + ", " + to_string(year);
	}

	bool operator < (const date& dt)
	{
		if (!isValidDate() || !dt.isValidDate()) {
			cout << ONE_OF_THE_DATES_IS_INCORRECT << endl;
			return false;
		}

		return year < dt.year || (year == dt.year && month < dt.month) || (year == dt.year && month == dt.month && day < dt.day);
	}

private:
	int day = 0;
	int month = 0;
	int year = 0;

	bool isLeapYear() const {
		return year % 4 == 0;
	}

	long long numberOfDaysByDate() const
	{
		long long result = ((year - 1) * 365) + ((year - 1) / 4);

		if (month > 1) {
			for (int i = 0; i < month - 1; i++)
			{
				result += MONTHS[i].numberOfDays;

				if (i == 1 && isLeapYear()) {
					result++;
				}
			}
		}

		return result + day;
	}
};

void sort(vector<date>& vec) {
	for (int i = 0; i < vec.size(); ++i) {
		if (!vec[i].isValidDate()) {
			cout << ONE_OF_THE_DATES_IS_INCORRECT << endl;
			return;
		}
	}

	for (int i = 0; i < vec.size() - 1; ++i) {
		int minIndex = i;

		for (int j = i + 1; j < vec.size(); ++j) {
			if (vec[j] < vec[minIndex]) {
				minIndex = j;
			}
		}

		swap(vec[i], vec[minIndex]);
	}
}

vector<date> dates = {
	{ 10, 4, 2024 },
	{ 5, 4, 2024 },
	{ 1, 4, 2024 },
	{ 9, 4, 2024 },
	{ 7, 4, 2024 },
	{ 5, 4, 2024 },
	{ 2, 4, 2024 },
	{ 31, 3, 2024 }
};

int main()
{
	date myDate(1, 1, 1);
	myDate.newDate(12, 4, 2024);
	cout << myDate.printDate() << endl;
	cout << myDate.getDayOfWeek() << endl;

	date myDate2(1, 1, 1);
	myDate2.newDate(14, 4, 2024);
	cout << myDate2.printDate() << endl;
	cout << myDate2.getDayOfWeek() << endl;
	cout << "Difference = " + to_string(myDate.calculateDifference(myDate2)) << endl;

	cout << myDate.printDate() + " < " + myDate2.printDate() + " = " + to_string(myDate < myDate2) << endl;

	cout << endl;
	cout << "Unsort version:" << endl;
	for (int i = 0; i < dates.size(); ++i) {
		cout << to_string(i + 1) + ": " + dates[i].printDate() << endl;
	}

	cout << endl;
	cout << "Sort version:" << endl;
	sort(dates);
	for (int i = 0; i < dates.size(); ++i) {
		cout << to_string(i + 1) + ": " + dates[i].printDate() << endl;
	}

	return 0;
}
